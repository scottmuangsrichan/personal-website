var _a;
{
  const propTypes = {
    0: (value) => value,
    1: (value) => JSON.parse(value, reviver),
    2: (value) => new RegExp(value),
    3: (value) => new Date(value),
    4: (value) => new Map(JSON.parse(value, reviver)),
    5: (value) => new Set(JSON.parse(value, reviver)),
    6: (value) => BigInt(value),
    7: (value) => new URL(value)
  };
  const reviver = (propKey, raw) => {
    if (propKey === "" || !Array.isArray(raw))
      return raw;
    const [type, value] = raw;
    return type in propTypes ? propTypes[type](value) : void 0;
  };
  if (!customElements.get("astro-island")) {
    customElements.define("astro-island", (_a = class extends HTMLElement {
      constructor() {
        super(...arguments);
        this.hydrate = () => {
          var _a2;
          if (!this.hydrator || ((_a2 = this.parentElement) == null ? void 0 : _a2.closest("astro-island[ssr]"))) {
            return;
          }
          let innerHTML = null;
          let fragment = this.querySelector("astro-fragment");
          if (fragment == null && this.hasAttribute("tmpl")) {
            let template = this.querySelector("template[data-astro-template]");
            if (template) {
              innerHTML = template.innerHTML;
              template.remove();
            }
          } else if (fragment) {
            innerHTML = fragment.innerHTML;
          }
          const props = this.hasAttribute("props") ? JSON.parse(this.getAttribute("props"), reviver) : {};
          this.hydrator(this)(this.Component, props, innerHTML, {
            client: this.getAttribute("client")
          });
          this.removeAttribute("ssr");
          window.removeEventListener("astro:hydrate", this.hydrate);
          window.dispatchEvent(new CustomEvent("astro:hydrate"));
        };
      }
      async connectedCallback() {
        window.addEventListener("astro:hydrate", this.hydrate);
        await import(this.getAttribute("before-hydration-url"));
        const opts = JSON.parse(this.getAttribute("opts"));
        Astro[this.getAttribute("client")](async () => {
          const rendererUrl = this.getAttribute("renderer-url");
          const [componentModule, { default: hydrator }] = await Promise.all([
            import(this.getAttribute("component-url")),
            rendererUrl ? import(rendererUrl) : () => () => {
            }
          ]);
          this.Component = componentModule[this.getAttribute("component-export") || "default"];
          this.hydrator = hydrator;
          return this.hydrate;
        }, opts, this);
      }
      attributeChangedCallback() {
        if (this.hydrator)
          this.hydrate();
      }
    }, _a.observedAttributes = ["props"], _a));
  }
}
